import logging
from aiogram import types
from aiogram.filters import Command
from app.bot.bot import router
from app.llm.gigachat_service import generate_answer
from app.data.session import get_db, fetch_context_from_db

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: types.Message):
    logger.info(f"Received /start command from user {message.from_user.id}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[message.from_user.id] = {
        "started": True,
        "context": [],
        "used_urls": set()
    }

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(message: types.Message):
    logger.info(f"Received /help command from user {message.from_user.id}")

    await message.answer(
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
        "1. –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤?\n"
        "2. –•–æ—á—É —Å –≤–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!\n"
        "3. –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /contact
async def contact_command(message: types.Message):
    logger.info(f"Received /contact command from user {message.from_user.id}")

    contact_info = (
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–¥—Ä–µ—Å—É:\n"
        "üìß Email: info@eora.ru\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n"
        "üåç –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://eora.ru/contacts"
    )
    await message.answer(contact_info)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
async def handle_question(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ—Å—Å–∏—é —Å –∫–æ–º–∞–Ω–¥–æ–π /start
    if user_id not in user_sessions or not user_sessions[user_id].get("started"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏.")
        return

    user_question = message.text
    logger.info(f"Received question from user {user_id}: {user_question}")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    context_with_urls = []
    async for db in get_db():
        fetched_context = await fetch_context_from_db(db, user_question, limit=5)
        context_with_urls.extend(fetched_context)
    logger.debug(f"Fetched context for user {user_id}: {context_with_urls}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏
    current_session = user_sessions[user_id]
    current_session["context"].extend(context_with_urls)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    used_urls = current_session["used_urls"]
    answer = await generate_answer(user_question, context_with_urls, list(used_urls))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    new_urls = [url for _, url in context_with_urls]
    current_session["used_urls"].update(new_urls)

    logger.info(f"Sending answer to user {user_id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∂–∏–º–æ–º HTML –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    await message.answer(answer, parse_mode='HTML')


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router.message.register(start_command, Command(commands=['start']))
router.message.register(help_command, Command(commands=['help']))
router.message.register(contact_command, Command(commands=['contact']))
router.message.register(handle_question)
