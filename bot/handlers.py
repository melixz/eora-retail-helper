import logging
from aiogram import types
from aiogram.filters import Command
from bot.bot import router
from llm.gigachat_service import generate_answer
from data.database import fetch_context_from_db

logger = logging.getLogger(__name__)
user_sessions = {}


async def start_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    logger.info(f"Received /start command from user {message.from_user.id}")
    user_sessions[message.from_user.id] = {"started": True, "context": [], "used_urls": []}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤.")


async def help_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å.
    """
    logger.info(f"Received /help command from user {message.from_user.id}")
    await message.answer("–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
                         "1. –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ä–∏—Ç–µ–π–ª–µ—Ä–æ–≤?\n"
                         "2. –•–æ—á—É —Å –≤–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!\n"
                         "3. –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?")


async def contact_command(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /contact. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–º–ø–∞–Ω–∏–∏.
    """
    logger.info(f"Received /contact command from user {message.from_user.id}")
    contact_info = (
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–¥—Ä–µ—Å—É:\n"
        "üìß Email: info@eora.ru\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n"
        "üåç –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://eora.ru/contacts"
    )
    await message.answer(contact_info)


async def handle_question(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–≤–ª–µ–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—è –æ—Ç–≤–µ—Ç.
    """
    user_id = message.from_user.id
    if user_id not in user_sessions or not user_sessions[user_id].get("started"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏.")
        return

    user_question = message.text
    logger.info(f"Received question from user {user_id}: {user_question}")

    context_with_urls = await fetch_context_from_db(user_question, limit=5)
    logger.debug(f"Fetched context for user {user_id}: {context_with_urls}")

    user_sessions[user_id]["context"].extend(context_with_urls)

    used_urls = user_sessions[user_id].get("used_urls", [])
    answer = await generate_answer(user_question, context_with_urls, used_urls)

    user_sessions[user_id]["used_urls"].extend(context_with_urls)

    logger.info(f"Sending answer to user {user_id}")
    await message.answer(answer)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router.message.register(start_command, Command(commands=['start']))
router.message.register(help_command, Command(commands=['help']))
router.message.register(contact_command, Command(commands=['contact']))
router.message.register(handle_question)
